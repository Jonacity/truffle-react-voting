{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","on","location","reload","App","useState","accounts","contract","owner","w3State","setState","voterInput","setVoterInput","proposalInput","setProposalInput","currentUser","setCurrentUser","workflowStatus","setWorkFlowStatus","proposals","setProposals","proposalWinningId","setProposalWinningId","votersCount","setVotersCount","isRegistered","setIsRegistered","useRef","useEffect","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","methods","call","getVoter","from","getVoters","voters","length","getProposals","proposalsList","options","fromBlock","toBlock","getPastEvents","resetData","returnValues","blockNumber","map","event","voterAddress","parseInt","events","VoterRegistered","changed","err","error","str","ProposalRegistered","alert","winningProposalID","handleChangeVoter","e","preventDefault","target","value","handleChangeProposal","handleSubmitVoter","addVoter","send","handleSubmitProposal","addProposal","syncWorkflowStatus","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","resetVote","isOwner","vote","index","setVote","renderProposals","description","proposal","key","hasVoted","onClick","voteCount","className","renderStepButton","onChange","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16a37783.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n\n      window.ethereum.on('accountsChanged', async () => {\n        window.location.reload();\n      });\n\n      window.ethereum.on('chainChanged', () => {\n        window.location.reload();\n      })\n    });\n  });\n\nexport default getWeb3;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport VotingContract                         from \"./contracts/Voting.json\";\nimport getWeb3                                from \"./getWeb3\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  const [w3State, setState] = useState({\n    web3: null,\n    accounts: null,\n    contract: null,\n    owner: null\n  });\n\n  const [voterInput, setVoterInput] = useState(\"\");\n  const [proposalInput, setProposalInput] = useState(\"\");\n  const [currentUser, setCurrentUser] = useState({});\n  const [workflowStatus, setWorkFlowStatus] = useState(\"0\");\n  const [proposals, setProposals] = useState([]);\n  const [proposalWinningId, setProposalWinningId] = useState(null);\n  const [votersCount, setVotersCount] = useState(0);\n  const [isRegistered, setIsRegistered] = useState(false);\n\n  const inputRef = useRef();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n  \n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n  \n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VotingContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          VotingContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        const owner = await instance.methods.owner().call();\n        const workflowStatus = await instance.methods.workflowStatus().call();\n          \n        setState({\n          web3,\n          accounts,\n          contract: instance,\n          owner\n        });\n        setWorkFlowStatus(workflowStatus);\n        \n        if (accounts[0] === owner) {\n          const currentUser = await instance.methods.getVoter(accounts[0]).call({ from: accounts[0] });\n          setCurrentUser(currentUser);\n          setIsRegistered(true)\n          const voters = await instance.methods.getVoters().call({ from: accounts[0] });\n          setVotersCount(voters.length);\n          const proposalsList = await instance.methods.getProposals().call({ from: accounts[0] });\n          setProposals(proposalsList);\n        } else {\n          let options = {\n            fromBlock: 0,\n            toBlock: 'latest'\n          };\n          const resetData = await instance.getPastEvents(\"ResetVote\", options)\n      \n          options = {\n            // filter: {\n            //     value: \"address\"\n            // },\n            fromBlock: resetData[resetData.length - 1].returnValues.blockNumber,\n            toBlock: 'latest'\n          };  \n          const votersData = await instance.getPastEvents(\"VoterRegistered\", options)\n          // console.log(\"votersData\", votersData);\n          votersData.map(async event => {\n            if (event.returnValues.voterAddress === accounts[0]) {\n              setIsRegistered(true);\n              const currentUser = await instance.methods.getVoter(accounts[0]).call({ from: accounts[0] });\n              setCurrentUser(currentUser);\n\n              if (parseInt(workflowStatus) >= 1) {\n                const proposalsList = await instance.methods.getProposals().call({ from: accounts[0] });\n                setProposals(proposalsList);\n              }\n            }\n          });\n        }\n\n        await instance.events.VoterRegistered()\n          .on(\"data\", async event => {\n              const voterAddress = event.returnValues.voterAddress;\n              if (voterAddress === accounts[0]) {\n                  const currentUser = await instance.methods.getVoter(accounts[0]).call({ from: accounts[0] });\n                  setCurrentUser(currentUser);\n                  setIsRegistered(true);\n              }\n              if (accounts[0] === owner) {\n                const voters = await instance.methods.getVoters().call({ from: accounts[0] });\n                setVotersCount(voters.length);\n              }\n              console.log(\"New voter have been registered: \" + voterAddress);\n          })\n          .on(\"changed\", changed => console.log(changed))\n          .on(\"error\", err => console.error(err))\n          .on(\"connected\", str => console.log(str));\n\n        await instance.events.ProposalRegistered()\n          .on(\"data\", async event => {\n              const proposalsList = await instance.methods.getProposals().call({ from: accounts[0] });\n              setProposals(proposalsList);\n              console.log(\"New proposal pushed.\");\n          })\n          .on(\"changed\", changed => console.log(changed))\n          .on(\"error\", err => console.error(err))\n          .on(\"connected\", str => console.log(str));\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n        // if (state && state.contract && state.contract.methods) {\n          if (workflowStatus === \"5\") {\n              const { contract, owner } = w3State;\n              const proposalsList = await contract.methods.getProposals().call({ from: owner });\n              const proposalWinningId = await contract.methods.winningProposalID().call({ from: owner });\n              setProposals(proposalsList);\n              setProposalWinningId(proposalWinningId);\n          }\n    })()\n}, [workflowStatus]);\n\n  // useEffect(() => {\n  //   (function () {\n  //       if (workflowStatus === \"0\") {\n  //           setActiveStep(0);\n  //       } else if (\n  //           workflowStatus === \"1\" ||  \n  //           workflowStatus === \"2\"\n  //       ) {\n  //           setActiveStep(1);\n  //       } else if (\n  //           workflowStatus === \"3\" ||  \n  //           workflowStatus === \"4\"\n  //       ) {\n  //           setActiveStep(2);\n  //       } else if (workflowStatus === \"5\") {\n  //           setActiveStep(4);\n  //       }\n  //   })();\n  // }, [workflowStatus]);\n\n  console.log(\"currentUser2\", currentUser);\n\n  const handleChangeVoter = (e) => {\n    e.preventDefault();\n    setVoterInput(e.target.value);\n  }\n\n  const handleChangeProposal = (e) => {\n    e.preventDefault();\n    setProposalInput(e.target.value);\n  }\n\n  const handleSubmitVoter = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.addVoter(voterInput).send({ from: owner });\n  }\n\n  const handleSubmitProposal = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.addProposal(proposalInput).send({ from: accounts[0] });\n  }\n\n  const syncWorkflowStatus = async () => {\n    const workflowStatus = await w3State.contract.methods.workflowStatus().call();\n    setWorkFlowStatus(workflowStatus);\n  }\n\n  const startProposalsRegistering = async () => {\n    const { accounts, contract, owner } = w3State;\n    await w3State.contract.methods.startProposalsRegistering().send({ from: owner });\n    await syncWorkflowStatus();\n  }\n\n  const endProposalsRegistering = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.endProposalsRegistering().send({ from: owner });\n    await syncWorkflowStatus();\n  }\n\n  const startVotingSession = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.startVotingSession().send({ from: owner });\n    await syncWorkflowStatus();\n  }\n\n  const endVotingSession = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.endVotingSession().send({ from: owner });\n    await syncWorkflowStatus();\n  }\n\n  const tallyVotes = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.tallyVotes().send({ from: owner });\n    await syncWorkflowStatus();\n  }\n\n  const resetVote = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.resetVote().send({ from: owner });\n    await syncWorkflowStatus();\n    setProposals([]);\n    const voters = await contract.methods.getVoters().call({ from: accounts[0] });\n    setVotersCount(voters.length);\n  }\n\n  const isOwner = () => w3State.accounts[0] === w3State.owner;\n\n  const renderLoggedUser = () => {\n    if (isOwner()) {\n      return \"owner\";\n    }\n\n    if (isRegistered) {\n      return \"registered\";\n    }\n\n    return \"not registered\";\n  };\n\n  const renderVotersCount = () => <p>{votersCount} registered {votersCount > 1 ? \"voters\" : \"voter\"}</p>\n\n  const renderStepButton = () => {\n    switch (workflowStatus) {\n      case \"0\":\n        return <button onClick={startProposalsRegistering}>Start proposal registration</button>;\n      case \"1\":\n        return <button onClick={endProposalsRegistering}>End proposal registration</button>;\n      case \"2\":\n        return <button onClick={startVotingSession}>Start voting session</button>;\n      case \"3\":\n        return <button onClick={endVotingSession}>End voting session</button>;\n      case \"4\":\n        return <button onClick={tallyVotes}>Tally votes</button>;\n      case \"5\":\n        return <button onClick={resetVote}>Reset vote</button>;\n    }\n  }\n\n  const vote = async index => {\n    const { accounts, contract } = w3State;\n    await contract.methods.setVote(index).send({ from: accounts[0] });\n    const currentUser = await contract.methods.getVoter(accounts[0]).call();\n    setCurrentUser(currentUser);\n  }\n\n  const renderVoterButton = () => {\n    return (\n      <div>\n        <br /><br />\n        <input value={voterInput} onChange={handleChangeVoter} />\n        <button onClick={handleSubmitVoter}>Add voter</button>\n      </div>\n    )\n  }\n\n  const wrapperProposal = () => {\n    return (\n      <div>\n        {workflowStatus === \"1\" && (\n          <>\n            <input value={proposalInput} onChange={handleChangeProposal} />\n            <button onClick={handleSubmitProposal}>Add proposal</button>\n          </>\n        )}\n        {workflowStatus !== \"0\" && renderProposals(proposals)}\n      </div>\n    )\n  }\n\n  const renderProposals = (proposals) => {\n    if (proposals.length === 0) {\n      return <p>There is no proposal registered yet.</p>\n    }\n  \n    return (\n      <div>\n        {proposalWinningId && <p><b>The winner proposal is: {proposals[proposalWinningId].description}</b></p>}\n        Proposals:\n        {proposals.map((proposal, index) =>\n          <div key={index}>\n            <p>{proposal.description}</p>\n            {workflowStatus === \"3\" && !currentUser.hasVoted &&\n            <button onClick={() => vote(index)}>Vote</button>}\n            {workflowStatus === \"5\" &&\n            <div>{proposal.voteCount} {proposal.voteCount > 1 ? \"votes\" : \"vote\"}</div>}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  if (w3State.web3 === null) {\n    return <div>Loading Web3, accounts, and contract...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Voting dApp project</h1>\n      <p>Truffle react box example</p>\n      <p><strong>You are {renderLoggedUser()} ({w3State.accounts[0]})</strong></p>\n      {isOwner() &&\n      <>\n        <br />\n        <button onClick={resetVote}>Reset vote</button>\n        <br />\n      </>}\n      {isOwner() && renderVotersCount(votersCount)}\n      {isOwner() && renderStepButton()}\n      {isOwner() && workflowStatus === \"0\" && renderVoterButton()}\n      {isRegistered && wrapperProposal()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}